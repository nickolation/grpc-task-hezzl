// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserActionsServiceClient is the client API for UserActionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserActionsServiceClient interface {
	NewUser(ctx context.Context, in *NewUserRequest, opts ...grpc.CallOption) (*NewUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	GetUserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserListResponse, error)
	GetUserStringedList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserStringedListResponse, error)
}

type userActionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserActionsServiceClient(cc grpc.ClientConnInterface) UserActionsServiceClient {
	return &userActionsServiceClient{cc}
}

func (c *userActionsServiceClient) NewUser(ctx context.Context, in *NewUserRequest, opts ...grpc.CallOption) (*NewUserResponse, error) {
	out := new(NewUserResponse)
	err := c.cc.Invoke(ctx, "/service_proto.UserActionsService/NewUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userActionsServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/service_proto.UserActionsService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userActionsServiceClient) GetUserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserListResponse, error) {
	out := new(GetUserListResponse)
	err := c.cc.Invoke(ctx, "/service_proto.UserActionsService/GetUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userActionsServiceClient) GetUserStringedList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserStringedListResponse, error) {
	out := new(GetUserStringedListResponse)
	err := c.cc.Invoke(ctx, "/service_proto.UserActionsService/GetUserStringedList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserActionsServiceServer is the server API for UserActionsService service.
// All implementations must embed UnimplementedUserActionsServiceServer
// for forward compatibility
type UserActionsServiceServer interface {
	NewUser(context.Context, *NewUserRequest) (*NewUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	GetUserList(context.Context, *GetUserListRequest) (*GetUserListResponse, error)
	GetUserStringedList(context.Context, *GetUserListRequest) (*GetUserStringedListResponse, error)
	mustEmbedUnimplementedUserActionsServiceServer()
}

// UnimplementedUserActionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserActionsServiceServer struct {
}

func (UnimplementedUserActionsServiceServer) NewUser(context.Context, *NewUserRequest) (*NewUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewUser not implemented")
}
func (UnimplementedUserActionsServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserActionsServiceServer) GetUserList(context.Context, *GetUserListRequest) (*GetUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedUserActionsServiceServer) GetUserStringedList(context.Context, *GetUserListRequest) (*GetUserStringedListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStringedList not implemented")
}
func (UnimplementedUserActionsServiceServer) mustEmbedUnimplementedUserActionsServiceServer() {}

// UnsafeUserActionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserActionsServiceServer will
// result in compilation errors.
type UnsafeUserActionsServiceServer interface {
	mustEmbedUnimplementedUserActionsServiceServer()
}

func RegisterUserActionsServiceServer(s grpc.ServiceRegistrar, srv UserActionsServiceServer) {
	s.RegisterService(&UserActionsService_ServiceDesc, srv)
}

func _UserActionsService_NewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserActionsServiceServer).NewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_proto.UserActionsService/NewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserActionsServiceServer).NewUser(ctx, req.(*NewUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserActionsService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserActionsServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_proto.UserActionsService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserActionsServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserActionsService_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserActionsServiceServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_proto.UserActionsService/GetUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserActionsServiceServer).GetUserList(ctx, req.(*GetUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserActionsService_GetUserStringedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserActionsServiceServer).GetUserStringedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_proto.UserActionsService/GetUserStringedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserActionsServiceServer).GetUserStringedList(ctx, req.(*GetUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserActionsService_ServiceDesc is the grpc.ServiceDesc for UserActionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserActionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service_proto.UserActionsService",
	HandlerType: (*UserActionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewUser",
			Handler:    _UserActionsService_NewUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserActionsService_DeleteUser_Handler,
		},
		{
			MethodName: "GetUserList",
			Handler:    _UserActionsService_GetUserList_Handler,
		},
		{
			MethodName: "GetUserStringedList",
			Handler:    _UserActionsService_GetUserStringedList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
